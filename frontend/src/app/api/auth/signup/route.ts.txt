// src/app/api/auth/signup/route.ts
import { NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { hash } from 'bcryptjs';
import { signupSchema } from './schema';
import { generateInviteCode } from './utils';
import { validateInviter } from './utils';

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { full_name, phone_number, email, password, invite_code, ip_address } = signupSchema.parse(body);

    // Check for existing VIP0 user with same credentials
    const existingUser = await db.user.findFirst({
      where: {
        OR: [
          { phone_number },
          { email },
          { ip_address }
        ],
        vip_level: 0
      }
    });

    if (existingUser) {
      return NextResponse.json(
        { error: 'User with these details already exists' },
        { status: 400 }
      );
    }

    // Validate inviter
    const inviter = await validateInviter(invite_code);
    if (!inviter) {
      return NextResponse.json(
        { error: 'Invalid invitation code' },
        { status: 400 }
      );
    }

    // Create user
    const hashedPassword = await hash(password, 12);
    const invite_code_user = generateInviteCode();

    const user = await db.user.create({
      data: {
        full_name,
        phone_number,
        email,
        password_hash: hashedPassword,
        ip_address,
        inviter_id: inviter.user_id,
        invite_code: invite_code_user,
        account_status: 'active'
      }
    });

    // Update referral network (4 levels)
    await updateReferralNetwork(inviter.user_id, user.user_id);

    return NextResponse.json({
      message: 'User created successfully',
      user: {
        id: user.user_id,
        invite_code: user.invite_code
      }
    });

  } catch (error) {
    console.error('Signup error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

async function updateReferralNetwork(inviterId: number, newUserId: number) {
  // Update 4 levels of referrals
  const levels = [
    { level: 1, field: 'first_level_invites' },
    { level: 2, field: 'second_level_invites' },
    { level: 3, field: 'third_level_invites' },
    { level: 4, field: 'fourth_level_invites' }
  ];

  let currentInviterId = inviterId;
  
  for (const { level, field } of levels) {
    if (!currentInviterId) break;

    // Update user's invite counts
    await db.user.update({
      where: { user_id: currentInviterId },
      data: {
        [field]: { increment: 1 },
        total_invites: { increment: 1 }
      }
    });

    // Create referral network record
    await db.referral_network.create({
      data: {
        inviter_id: currentInviterId,
        invitee_id: newUserId,
        level,
      }
    });

    // Get next level inviter
    const nextUser = await db.user.findUnique({
      where: { user_id: currentInviterId },
      select: { inviter_id: true }
    });
    
    currentInviterId = nextUser?.inviter_id || null;
  }
}