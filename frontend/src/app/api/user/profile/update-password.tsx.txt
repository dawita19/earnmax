import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { api } from '@/lib/axios';

const passwordSchema = z.object({
  currentPassword: z.string().min(8),
  newPassword: z.string().min(8),
  confirmPassword: z.string().min(8),
}).refine(data => data.newPassword === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type PasswordFormData = z.infer<typeof passwordSchema>;

export const UpdatePasswordForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<PasswordFormData>({
    resolver: zodResolver(passwordSchema),
  });

  const onSubmit = async (data: PasswordFormData) => {
    try {
      await api.put('/user/update-password', {
        currentPassword: data.currentPassword,
        newPassword: data.newPassword,
      });
      // Show success notification
    } catch (error) {
      // Handle error
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label>Current Password</label>
        <input 
          type="password" 
          {...register('currentPassword')} 
          className="input-field"
        />
        {errors.currentPassword && <span>{errors.currentPassword.message}</span>}
      </div>
      
      <div>
        <label>New Password</label>
        <input 
          type="password" 
          {...register('newPassword')} 
          className="input-field"
        />
        {errors.newPassword && <span>{errors.newPassword.message}</span>}
      </div>
      
      <div>
        <label>Confirm Password</label>
        <input 
          type="password" 
          {...register('confirmPassword')} 
          className="input-field"
        />
        {errors.confirmPassword && <span>{errors.confirmPassword.message}</span>}
      </div>
      
      <button type="submit" className="btn-primary">
        Update Password
      </button>
    </form>
  );
};