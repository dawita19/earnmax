import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { api } from '@/lib/axios';

const withdrawalSchema = z.object({
  amount: z.number().min(1),
  paymentPassword: z.string().min(4),
});

export const WithdrawalForm = ({ 
  minWithdrawal,
  maxWithdrawal,
  balance 
}: {
  minWithdrawal: number;
  maxWithdrawal: number;
  balance: number;
}) => {
  const queryClient = useQueryClient();
  const { register, handleSubmit, formState: { errors }, setError } = useForm({
    resolver: zodResolver(withdrawalSchema),
  });

  const { mutate: requestWithdrawal, isLoading } = useMutation({
    mutationFn: async (data: { amount: number; paymentPassword: string }) => {
      const response = await api.post('/transactions/withdraw', data);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries(['user']);
      queryClient.invalidateQueries(['transactions']);
      // Show success notification
    },
    onError: (error: any) => {
      setError('root', { message: error.response?.data?.message || 'Withdrawal failed' });
    },
  });

  const onSubmit = (data: { amount: number; paymentPassword: string }) => {
    if (data.amount < minWithdrawal) {
      setError('amount', { message: `Minimum withdrawal is ${minWithdrawal}` });
      return;
    }
    if (data.amount > balance) {
      setError('amount', { message: 'Insufficient balance' });
      return;
    }
    requestWithdrawal(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label>Amount (Min: {minWithdrawal})</label>
        <input 
          type="number" 
          {...register('amount', { valueAsNumber: true })} 
          min={minWithdrawal}
          max={maxWithdrawal}
          className="input-field"
        />
        {errors.amount && <span>{errors.amount.message}</span>}
      </div>
      
      <div>
        <label>Payment Password</label>
        <input 
          type="password" 
          {...register('paymentPassword')} 
          className="input-field"
        />
        {errors.paymentPassword && <span>{errors.paymentPassword.message}</span>}
      </div>
      
      {errors.root && <div className="error-message">{errors.root.message}</div>}
      
      <button type="submit" disabled={isLoading} className="btn-primary">
        {isLoading ? 'Processing...' : 'Request Withdrawal'}
      </button>
    </form>
  );
};