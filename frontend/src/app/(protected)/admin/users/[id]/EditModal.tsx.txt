'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { User, userSchema } from '@/lib/validations/user';
import { updateUser } from '@/actions/users';
import { toast } from 'sonner';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Form } from '@/components/ui/form';
import { FormInput } from '@/components/form/FormInput';
import { FormSelect } from '@/components/form/FormSelect';
import { vipLevels } from '@/config/vip-levels';

interface EditModalProps {
  user: User;
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: () => void;
}

export function EditModal({ user, isOpen, onClose, onSuccess }: EditModalProps) {
  const [isLoading, setIsLoading] = useState(false);
  
  const form = useForm<User>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      ...user,
      vip_level: user.vip_level.toString(),
    },
  });

  const onSubmit = async (values: User) => {
    try {
      setIsLoading(true);
      await updateUser(user.id, values);
      toast.success('User updated successfully');
      onSuccess?.();
      onClose();
    } catch (error) {
      toast.error('Failed to update user');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Edit User</DialogTitle>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormInput
              control={form.control}
              name="full_name"
              label="Full Name"
            />
            
            <FormInput
              control={form.control}
              name="email"
              label="Email"
              disabled
            />
            
            <FormSelect
              control={form.control}
              name="vip_level"
              label="VIP Level"
              options={vipLevels.map(level => ({
                value: level.level_id.toString(),
                label: `VIP ${level.level_id} (${level.investment_amount} ETB)`,
              }))}
            />
            
            <FormInput
              control={form.control}
              name="balance"
              label="Balance"
              type="number"
            />
            
            <div className="flex justify-end space-x-2 pt-4">
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button type="submit" isLoading={isLoading}>
                Save Changes
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}