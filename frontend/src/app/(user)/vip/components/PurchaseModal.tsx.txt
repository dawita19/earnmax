import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useUser } from '@/contexts/user-context';
import { VIP_LEVELS } from '@/lib/constants';
import { Icons } from '@/components/icons';

interface PurchaseModalProps {
  level: number;
  open: boolean;
  onClose: () => void;
  onSubmit: (proof: File) => Promise<void>;
}

export const PurchaseModal: React.FC<PurchaseModalProps> = ({ level, open, onClose, onSubmit }) => {
  const [paymentProof, setPaymentProof] = useState<File | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { user } = useUser();

  const vipLevel = VIP_LEVELS.find(l => l.level === level);
  const inviterCode = user?.invite_code || '';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!paymentProof) return;
    
    setIsSubmitting(true);
    try {
      await onSubmit(paymentProof);
      onClose();
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Purchase VIP Level {level}</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>Investment Amount</Label>
              <Input 
                value={vipLevel?.investmentAmount.toLocaleString() + ' Birr'} 
                readOnly 
              />
            </div>
            <div>
              <Label>Daily Earnings</Label>
              <Input 
                value={vipLevel?.dailyEarning.toLocaleString() + ' Birr'} 
                readOnly 
              />
            </div>
          </div>

          <div>
            <Label>Payment Instructions</Label>
            <div className="mt-1 rounded-md bg-gray-50 p-3 text-sm">
              <p>1. Transfer <strong>{vipLevel?.investmentAmount.toLocaleString()} Birr</strong> to:</p>
              <p className="font-mono mt-1">Bank: Commercial Bank of Ethiopia</p>
              <p className="font-mono">Account: 100034567890</p>
              <p className="font-mono">Name: EarnMax Elite</p>
              <p className="mt-2">2. Upload your payment proof below</p>
            </div>
          </div>

          <div>
            <Label htmlFor="paymentProof">Payment Proof</Label>
            <Input
              id="paymentProof"
              type="file"
              accept="image/*,.pdf"
              onChange={(e) => setPaymentProof(e.target.files?.[0] || null)}
            />
            <p className="text-xs text-gray-500 mt-1">
              Upload screenshot or scan of your payment receipt
            </p>
          </div>

          {inviterCode && (
            <div className="rounded-md bg-blue-50 p-3 text-sm">
              <p>Your Invitation Code: <strong>{inviterCode}</strong></p>
              <p className="mt-1">Share this code to earn referral bonuses!</p>
            </div>
          )}
        </div>

        <div className="flex justify-end gap-2">
          <Button variant="outline" onClick={onClose} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={!paymentProof || isSubmitting}
          >
            {isSubmitting && <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />}
            Submit Request
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};