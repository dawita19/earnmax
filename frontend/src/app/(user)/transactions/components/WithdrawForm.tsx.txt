import { useState, useEffect } from 'react';
import { useUser } from '@/context/UserContext';
import { withdrawFunds } from '@/services/transactionService';
import { validateWithdrawal } from '@/utils/transactionValidation';

interface WithdrawFormProps {
  onSuccess: () => void;
  onError: (message: string) => void;
}

export const WithdrawForm = ({ onSuccess, onError }: WithdrawFormProps) => {
  const { user, refreshUser } = useUser();
  const [amount, setAmount] = useState('');
  const [paymentPassword, setPaymentPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [vipDetails, setVipDetails] = useState(null);

  useEffect(() => {
    // Load VIP level details
    const loadVipDetails = async () => {
      const details = await getUserVipLevel(user.vip_level);
      setVipDetails(details);
    };
    loadVipDetails();
  }, [user.vip_level]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // Validate withdrawal
      const validation = validateWithdrawal({
        amount: parseFloat(amount),
        user,
        vipDetails
      });

      if (!validation.valid) {
        throw new Error(validation.message);
      }

      // Process withdrawal
      await withdrawFunds({
        userId: user.user_id,
        amount: parseFloat(amount),
        paymentPassword,
        vipLevel: user.vip_level
      });

      // Refresh user data
      await refreshUser();
      onSuccess();
    } catch (error) {
      onError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Withdrawal Amount
        </label>
        <div className="mt-1 relative rounded-md shadow-sm">
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-3 pr-12 sm:text-sm border-gray-300 rounded-md p-2 border"
            placeholder="0.00"
            step="0.01"
            min={vipDetails?.min_withdrawal || 0}
            max={user.balance}
          />
          <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
            <span className="text-gray-500 sm:text-sm">ETB</span>
          </div>
        </div>
        <p className="mt-1 text-xs text-gray-500">
          Min: {vipDetails?.min_withdrawal} ETB | Max: {user.balance} ETB
        </p>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Payment Password
        </label>
        <input
          type="password"
          value={paymentPassword}
          onChange={(e) => setPaymentPassword(e.target.value)}
          className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 border"
          required
        />
      </div>

      <div className="flex justify-end">
        <button
          type="submit"
          disabled={isSubmitting}
          className={`inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          {isSubmitting ? 'Processing...' : 'Withdraw'}
        </button>
      </div>
    </form>
  );
};