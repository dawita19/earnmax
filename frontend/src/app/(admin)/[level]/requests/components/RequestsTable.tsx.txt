import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
  getPaginationRowModel,
  getSortedRowModel,
  SortingState,
} from '@tanstack/react-table';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { useState } from 'react';
import { Request } from '@/types';

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  adminLevel: 'high' | 'low';
}

export function RequestsTable<TData, TValue>({
  columns,
  data,
  adminLevel,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
    initialState: {
      pagination: {
        pageSize: 10,
      },
    },
  });

  return (
    <div className="space-y-4">
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && 'selected'}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No requests found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between px-2">
        <div className="text-sm text-muted-foreground">
          Showing {table.getRowModel().rows.length} of{' '}
          {data.length} request(s)
        </div>
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
}

// Sample column definitions for purchase requests
export const purchaseRequestColumns: ColumnDef<Request>[] = [
  {
    accessorKey: 'user.fullName',
    header: 'User',
    cell: ({ row }) => (
      <div className="font-medium">
        {row.original.user.fullName}
        <div className="text-sm text-muted-foreground">
          ID: {row.original.user.userId}
        </div>
      </div>
    ),
  },
  {
    accessorKey: 'vipLevel',
    header: 'VIP Level',
    cell: ({ row }) => `VIP ${row.original.vipLevel}`,
  },
  {
    accessorKey: 'amount',
    header: 'Amount',
    cell: ({ row }) =>
      new Intl.NumberFormat('en-ET', {
        style: 'currency',
        currency: 'ETB',
      }).format(row.original.amount),
  },
  {
    accessorKey: 'paymentProof',
    header: 'Proof',
    cell: ({ row }) => (
      <PaymentProofViewer
        proofUrl={row.original.paymentProofUrl}
        ocrData={row.original.ocrData}
      />
    ),
  },
  {
    accessorKey: 'createdAt',
    header: 'Request Date',
    cell: ({ row }) =>
      new Date(row.original.createdAt).toLocaleString(),
  },
  {
    id: 'actions',
    cell: ({ row }) => (
      <ApprovalButtons
        requestId={row.original.id}
        requestType="purchase"
        onStatusChange={() => {}}
        adminLevel="high"
      />
    ),
  },
];