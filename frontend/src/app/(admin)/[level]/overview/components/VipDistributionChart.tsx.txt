import React from 'react';
import { Box, Typography, Paper, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';
import { useAdminDashboard } from '@/hooks/useAdminDashboard';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC0CB', '#A2D9CE', '#D2B4DE'];

export const VipDistributionChart: React.FC = () => {
  const { vipDistribution, isLoading } = useAdminDashboard();
  const [viewMode, setViewMode] = React.useState<'count' | 'revenue'>('count');

  const chartData = React.useMemo(() => {
    if (!vipDistribution) return [];
    
    return Object.entries(vipDistribution).map(([level, data]) => ({
      name: `VIP ${level}`,
      count: data.userCount,
      revenue: data.totalRevenue,
    }));
  }, [vipDistribution]);

  return (
    <Paper elevation={3} sx={{ p: 3, height: '100%' }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h6" component="div">
          VIP Distribution
        </Typography>
        <FormControl size="small" sx={{ minWidth: 120 }}>
          <InputLabel>View By</InputLabel>
          <Select
            value={viewMode}
            label="View By"
            onChange={(e) => setViewMode(e.target.value as 'count' | 'revenue')}
          >
            <MenuItem value="count">User Count</MenuItem>
            <MenuItem value="revenue">Revenue</MenuItem>
          </Select>
        </FormControl>
      </Box>

      {isLoading ? (
        <Box height={300} display="flex" alignItems="center" justifyContent="center">
          <Typography>Loading VIP distribution...</Typography>
        </Box>
      ) : (
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={chartData}
              cx="50%"
              cy="50%"
              labelLine={false}
              outerRadius={80}
              fill="#8884d8"
              dataKey={viewMode}
              nameKey="name"
              label={({ name, percent }) => 
                `${name}: ${(percent * 100).toFixed(0)}%`}
            >
              {chartData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip 
              formatter={(value, name, props) => {
                const formattedValue = viewMode === 'revenue' 
                  ? `$${Number(value).toLocaleString()}` 
                  : value;
                return [formattedValue, name];
              }}
            />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      )}
    </Paper>
  );
};