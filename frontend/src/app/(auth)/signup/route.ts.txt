import { NextResponse } from 'next/server';
import { z } from 'zod';
import { db } from '@/lib/db';
import { hashPassword } from '@/lib/auth/utils';
import { generateOTP } from '@/lib/auth/utils';

const signupSchema = z.object({
  full_name: z.string().min(3),
  phone_number: z.string().regex(/^\+?[0-9]{10,15}$/),
  email: z.string().email().optional(),
  password: z.string().min(8),
  inviter_code: z.string().optional(),
  ip_address: z.string().ip().optional()
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const validatedData = signupSchema.parse(body);

    // Check if user already exists
    const existingUser = await db.user.findFirst({
      where: {
        OR: [
          { phone_number: validatedData.phone_number },
          ...(validatedData.email ? [{ email: validatedData.email }] : [])
        ]
      }
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "User with this phone or email already exists" },
        { status: 409 }
      );
    }

    // Check IP restrictions for VIP0
    if (validatedData.ip_address) {
      const ipUser = await db.user.findFirst({
        where: {
          ip_address: validatedData.ip_address,
          vip_level: 0
        }
      });
      if (ipUser) {
        return NextResponse.json(
          { error: "Only one VIP0 account allowed per IP" },
          { status: 403 }
        );
      }
    }

    // Process inviter code
    let inviterId = null;
    if (validatedData.inviter_code) {
      const inviter = await db.user.findUnique({
        where: { invite_code: validatedData.inviter_code }
      });
      if (inviter) inviterId = inviter.user_id;
    }

    // Generate user data
    const hashedPassword = await hashPassword(validatedData.password);
    const inviteCode = generateInviteCode();
    const otp = generateOTP();

    // Create user
    const newUser = await db.user.create({
      data: {
        full_name: validatedData.full_name,
        phone_number: validatedData.phone_number,
        email: validatedData.email,
        password_hash: hashedPassword,
        ip_address: validatedData.ip_address,
        inviter_id: inviterId,
        invite_code: inviteCode,
        verification_otp: otp,
        verification_expiry: new Date(Date.now() + 15 * 60 * 1000) // 15 minutes expiry
      }
    });

    // Send OTP via SMS/Email
    await sendOTP(newUser.phone_number, otp);

    // Return response without sensitive data
    const { password_hash, verification_otp, ...safeUser } = newUser;

    return NextResponse.json(
      { 
        success: true, 
        user: safeUser,
        message: "Verification OTP sent to your phone number" 
      },
      { status: 201 }
    );

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }
    
    console.error("Signup error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}