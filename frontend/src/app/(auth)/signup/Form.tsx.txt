// app/(auth)/signup/Form.tsx
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { signupSchema } from '@/validations/auth';
import { useRouter } from 'next/navigation';
import { useToast } from '@/components/ui/use-toast';
import PhoneInput from '@/components/auth/PhoneInput';
import PasswordStrength from '@/components/auth/PasswordStrength';
import { useState } from 'react';

type FormData = z.infer<typeof signupSchema>;

export default function SignupForm() {
  const router = useRouter();
  const { toast } = useToast();
  const [inviterData, setInviterData] = useState<{ name: string; isValid: boolean } | null>(null);
  
  const form = useForm<FormData>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      fullName: '',
      phoneNumber: '',
      email: '',
      password: '',
      confirmPassword: '',
      inviteCode: '',
      agreeTerms: false,
    },
  });

  async function checkInviteCode(code: string) {
    // Simulate API call
    return new Promise<{ name: string; isValid: boolean }>((resolve) => {
      setTimeout(() => {
        if (code === 'VALID123') {
          resolve({ name: 'Referral User', isValid: true });
        } else {
          resolve({ name: '', isValid: false });
        }
      }, 500);
    });
  }

  async function onSubmit(data: FormData) {
    try {
      // Verify invite code first
      const inviter = await checkInviteCode(data.inviteCode);
      if (!inviter.isValid) {
        form.setError('inviteCode', { message: 'Invalid invitation code' });
        return;
      }

      // Simulate signup API call
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(await response.text());
      }

      // Redirect to verification with phone number
      router.push(`/signup/verification?phone=${encodeURIComponent(data.phoneNumber)}`);
    } catch (error) {
      toast({
        title: 'Signup Failed',
        description: error instanceof Error ? error.message : 'An error occurred',
        variant: 'destructive',
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="fullName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Full Name</FormLabel>
              <FormControl>
                <Input placeholder="Enter your full name" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="phoneNumber"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Phone Number</FormLabel>
              <FormControl>
                <PhoneInput {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email (Optional)</FormLabel>
              <FormControl>
                <Input type="email" placeholder="Enter your email" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Password</FormLabel>
              <FormControl>
                <div className="space-y-2">
                  <Input type="password" placeholder="Create a password" {...field} />
                  <PasswordStrength password={field.value} />
                </div>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="confirmPassword"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Confirm Password</FormLabel>
              <FormControl>
                <Input type="password" placeholder="Confirm your password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="inviteCode"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Invitation Code</FormLabel>
              <FormControl>
                <div className="flex gap-2">
                  <Input placeholder="Enter invitation code" {...field} />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={async () => {
                      const code = form.getValues('inviteCode');
                      if (code) {
                        const result = await checkInviteCode(code);
                        setInviterData(result);
                        if (!result.isValid) {
                          form.setError('inviteCode', { message: 'Invalid code' });
                        }
                      }
                    }}
                  >
                    Verify
                  </Button>
                </div>
              </FormControl>
              {inviterData?.isValid && (
                <div className="text-sm text-green-600">
                  Valid code! Invited by: {inviterData.name}
                </div>
              )}
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="agreeTerms"
          render={({ field }) => (
            <FormItem className="flex items-center space-x-2">
              <FormControl>
                <input
                  type="checkbox"
                  checked={field.value}
                  onChange={field.onChange}
                  className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                />
              </FormControl>
              <FormLabel className="!mt-0 text-sm">
                I agree to the{' '}
                <Link href="/terms" className="text-primary underline">
                  Terms of Service
                </Link>{' '}
                and{' '}
                <Link href="/privacy" className="text-primary underline">
                  Privacy Policy
                </Link>
              </FormLabel>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" loading={form.formState.isSubmitting}>
          Create Account
        </Button>
      </form>
    </Form>
  );
}