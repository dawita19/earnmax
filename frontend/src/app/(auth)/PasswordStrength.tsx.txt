// components/auth/PasswordStrength.tsx
'use client';

import { useEffect, useState } from 'react';
import { Progress } from '@/components/ui/progress';

interface PasswordStrengthProps {
  password: string;
}

export default function PasswordStrength({ password }: PasswordStrengthProps) {
  const [strength, setStrength] = useState(0);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (!password) {
      setStrength(0);
      setMessage('');
      return;
    }

    let score = 0;
    let messages: string[] = [];

    // Length check
    if (password.length >= 8) score += 20;
    if (password.length >= 12) score += 20;
    else messages.push('at least 8 characters');

    // Complexity checks
    if (/[A-Z]/.test(password)) score += 20;
    else messages.push('one uppercase letter');
    
    if (/[a-z]/.test(password)) score += 20;
    else messages.push('one lowercase letter');
    
    if (/[0-9]/.test(password)) score += 20;
    else messages.push('one number');
    
    if (/[^A-Za-z0-9]/.test(password)) score += 20;
    else messages.push('one special character');

    setStrength(Math.min(score, 100));
    setMessage(messages.length > 0 ? `Needs ${messages.join(', ')}` : 'Strong password');
  }, [password]);

  const getColor = () => {
    if (strength < 40) return 'destructive';
    if (strength < 80) return 'warning';
    return 'success';
  };

  return (
    <div className="space-y-1">
      <Progress value={strength} indicatorColor={getColor()} />
      {password && (
        <p className={`text-xs ${
          strength < 40 ? 'text-destructive' :
          strength < 80 ? 'text-warning' : 'text-success'
        }`}
        >
          {message}
        </p>
      )}
    </div>
  );
}